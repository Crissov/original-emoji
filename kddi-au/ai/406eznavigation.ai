%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8.0.1%%For: (cromagnon) ()%%Title: (406eznavigation.ai)%%CreationDate: (7/24/03) (8:22 PM)%%BoundingBox: 288 432 312 456%%HiResBoundingBox: 288 432 312 456%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%CMYKProcessColor: 0 0 0 1 ([\203\214\203W\203X\203g\203\214\201[\203V\203\207\203\223])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.504 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 298.5 420.3887 298.5 420.3887%AI3_TileBox: 28.5 31.3896 564.5 811.3896%AI3_DocumentPreview: None%AI5_ArtSize: 595.2756 841.8898%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 2%AI8_OpenToView: 271 473.8887 12 736 699 18 0 0 198 115 0 1%AI5_OpenViewLayers: 73%%PageOrigin:28.5 31.3896%%AI3_PaperRect:-28 812 567 -30%%AI3_Margin:28 -31 -29 30%AI7_GridSettings: 24 48 24 48 0 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 128 8%%BeginData: 14020 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0AFFCAC2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C9FD11FFCABBFD%6EBAC2C9FD0CFFCFC2FD72BAC1FD0AFFCAFD0DBAB4FD0BBAB4FD5CBACFFD%07FFCABBFD77BACFFD05FFCAFD06BABBC2FD04FFC9FD05BAC2C2C9C9C9C2%C1FD07BAC1C2FD4FFFCAC9FD07BAFD05FFC2FD05BAC9FD06FFBABABAC1C9%FD09FFCAC8FD07BAC9CFFD4FFFC2FD05BAC1FFFFFFCAFD05BAC9FD06FFC2%BABAC1CAFD0DFFC2FD07BAC2FD4FFFC3FD05BAC9FFFFC1FD04BAC9FD07FF%C2BABAC9FD10FFC2FD07BAC9FD4EFFC2FD04BAC2FFCAFD04BAC1FD08FFBB%BABACFFD11FFC2FD07BAC1CAFD4DFFFD05BAFFCAFD04BAC3FD08FFC2BABA%C2FD12FFC2BABABAC1FD04BAC3FD4CFFC9FD04BAC9C2FD04BACFFD08FFC9%BABABACAFD12FFBBBABAC2C2FD05BAFD4BFFCAFD04BAC9C9FD04BAFD0AFF%BABABAC1FD12FFC3BABAC9FFFFBBFD04BACFFD4AFFFD04BAC2C2FD04BAFD%08FFC9FD05BAC1CAFD10FFC9BABAC2FFFFFFC1FD04BAC9FD49FFFD04BAC9%C9FD04BAFD06FFCAC2FD07BAC1C9FD0FFFC2BABAC9FD04FFC1FD04BAC9FD%48FFFD04BAC2C2FD04BAFD05FFC2FD05BAC2C9FD05BAC9CAFD0BFFC2BABA%BACAFD05FFFD05BAC2FD47FFFD04BAC2C9FD04BAFD04FFBBFD04BAC9FFFF%FFCFFD05BAC1C1C9CAFD05FFCAC9FD04BAC2FD06FFCFFD05BAC8FD46FFFD%04BAC2C2FD04BAFFFFC9FD04BABBFD07FFC2FD09BABBFD07BABBFD08FFC2%FD05BAC9FD45FFFD04BAC9C9FD04BACFC2BABABAC1C9FD09FFCFC9BBFD0E%BAFD09FFCABABAC1BABABAC9FD44FFFD04BAC2C2FD04BAC1BABABAC1CAFD%0CFFCABABAB4C1FD05BABBFD04BAC3FD09FFBBBAB4BBBABABACAFD43FFFD%04BAC9C9FD07BAC8FD0EFFC2BABAC9FD08FFC2BABAC1FD09FFC8BABAC2C1%BABABAFD43FFFD04BAC2C2FD06BAC9FD0FFFC1BABACAFD09FFBBBABAC2FD%08FFC9BABAC2CABABABABBFD42FFFD04BAC9C9FD05BACFFD10FFBABABAFD%0AFFCFBABABACFFD07FFCFBABABBFFCABABABAC2FD41FFFD04BAC2C2BABA%BAB4C9FD10FFC3BABAC2FD0BFFC2BABABBFD07FFC9BABAC1FFFFC2BABABA%C9FD40FFFD04BAC2C9FD05BAC9FD0FFFC2BABAC9FD0BFFCFBABABACAFD06%FFCABABAC2FFFFFFC1BABAC1FD40FFFD04BAC2C2FD06BAC9FD0EFFBABABA%FD0DFFC2BABAC1FD06FFC1BABAC9FD04FFBABABAC9FD3FFFFD04BAC9C9FD%07BAC2CFFD0BFFCABABAC1FD0EFFBABABACFFD05FFBABABACFFD04FFC9BA%BABAFD2BFFCACAC2C9C2C1BBC2C1C1BBC2C2C9C9CFFD04FFFD04BAC2C2FD%04BAC1BABABABBC9FD0AFFC9BABAC1FD0EFFC2BABAC1FD04FFC2BABABBFD%06FFC1BABABBFD25FFCAC9C1C1FD13BAC2C2FD04BAC9C9FD04BAFFC8FD04%BAC2FD09FFC1BABAC9FD0EFFCABABABAFFFFFFCABABABACFFD06FFCABABA%BACAFD21FFC9C2FD1EBAC2C2FD04BAFFFFCAFD05BAC9CAFD06FFBABABACF%FD0FFFBBBABAC9FFC9BABABAC2FD08FFC1BABAC1FD1EFFCAC2FD09BAC1C1%C9C2CAC9CAC9CAC9CAC9C9C2C2BBFD08BAC9C9FD04BAFD04FFC1FD04BABB%C2FD04FFCFBABABBFD10FFC9BABABAC2BABABAC1FD0AFFBABABACAFD1BFF%C9BBFD06BABBC2C9CAFD12FFCFC9FD05BAC2C2FD04BAFD05FFC9BBFD05BA%C2C3FFC2BABAC2FD10FFCABABABAB4BABAC1CAFD09FFCABABABAC1FD19FF%C3BBFD06BAB4CFFD17FFC9BABAB4BABAC2C9FD04BAFD07FFCABBFD06BAC1%BABAC9FD0FFFC9C8FD05BAC2FD0CFFFD04BACAFD16FFC9FD05BAC1BABABA%CAFD18FFC2FD05BAC2C2FD04BAFD09FFC9C2FD08BABBC9C2CAC9CFFFFFCA%CAC9C9C2C1FD07BACAFD0DFFFD04BAC9FD14FFCAC1FD05BAC9C0BABAC1FD%19FFC1FD05BAC9C9FD04BAFD0CFFC3C1FD19BABBFD0EFFFD05BAFD13FFC2%FD04BABBC3FFCFBABABACAFD19FFFD06BAC2C2FD04BAFD0EFFC2BABAB4FD%10BAC1C2CABABABACAFD0CFFCAFD05BACAFD10FFCAFD05BAC9CAFFFFC2BA%BABAC9C1C1BBC1BBC1BBC1BBC1BBC1C2C2C2CACAFD07FFC2FD06BAC9C9FD%04BAFD0EFFBBBABAFFFFCFC3C9C1C2C1C2C1C2C1C2C2C9CAFD04FFC8BABA%C3FD0CFFCFFD05BAC8FD0FFFC9FD04BAC1FFFFCAC2C2FD17BAC1C1C9CAFF%FFC2FD06BAC2C2FD04BAFD0DFFCABABABAFD14FFC3BABAC2FD0CFFC2BABA%C2BABABAFD0DFFCAC2FD04BAC2C2FD21BAC1FD07BAC9C9FD04BAFD0DFFC9%BABAC1FD14FFCFBABABBFD0CFFC2BABAC9BBBABACAFD0CFFC1BABABAC1FD%0ABAC1C9C2CFCACACFFD05FFCFCAC9CFC2C9C1C2FD0EBAC2C2FD04BAFD0D%FFC1BABAC9FD15FFBABABAFD0CFFBABABAFFC1BABAC9FD0AFFCABBFD0ABA%BBC1BABABBFD15FFCAC9C2C1FD09BAC2C9FD04BAFD0DFFBBBABACFFD15FF%BBBABACFFD0AFFC9BABAC1FFC9BABAC1FD09FFCAC1FD07BAC1C2CAFFFFBA%BABACFFD1AFFBBFD07BAC2C2FD04BAFD0CFFCFBABABAFD16FFC2BABAC9FD%0AFFC1BABAC3FFCABABAC1FD08FFCAFD07BABBC9CAFFFFFFC2BABAC1FD1A%FFCFBABABACEFD04BAC9C9FD04BAFD0CFFC2BABAC2FD16FFC2BABAC9FD09%FFC9BABABAFFFFFFBABABAFD07FFCAC1FD05BAC1C9FD06FFBBBABAC9FD1A%FFCABABABBFFFD04BAC2C2FD04BAFD0CFFC1BABAC9FD16FFC9BABAC2FD08%FFCFBABABAC9FFFFFFC1BABAC9FD05FFCABBFD05BACAFD07FFC9BABABAFD%1BFFC2BABAC2FFFD04BAC9C9FD04BAFD0CFFBABABAFD17FFCABABAC2FD08%FFBABABAC2FD04FFC2BABAC9FD05FFC1FD04BAC2FD09FFC1BABAC9FD1BFF%C1BABACAFFFD04BAC2C2FD04BAFD0BFFC9BABAC1FD17FFCABABABBFD06FF%CAFD04BACAFD04FFC9BABAC2FD04FFC1FD04BACAFD09FFCABABABACAFD1A%FFCFBABABAFFFFFD04BAC9C9FD05BAC8CAFD08FFC9BABAC2FD17FFCABABA%C1FD05FFC9BABABAC1CAFD05FFC9BABAC1FFFFFFC3BABABAC1CFFD0AFFC8%BABAC2FD1BFFC9BABAC2FFFFFD04BAC2C2FD07BAC1CAFD06FFBABABACAFD%18FFBABABAFFFFFFCAC2FD04BACAFD06FFCABABABBFFFFFFFD04BACAFD0B%FFBABABACAFD1BFFC2BABAC2FFFFFD04BAC2C9FD09BAC1C3FD04FFBABABA%FD19FFBABABAFFFFC2BBBABABAC1CAFD08FFBABAC2FFFFBABABAC1FD0CFF%CABABAC1FD1CFFBBBABAFFFFFFFD04BAC2C2FD04BACABBFD06BAC1C2C3BA%BAC1FD19FFBABABAC2FD05BAC2CFFD09FFBABABAFFBBBABABAC3FD0CFFC2%BABAC2FD1BFFCABABABBFFFFFFFD04BAC9C9FD04BAFFFFCFC2FD09BAC2CA%FD17FFCAFD07BABBCAFD0BFFBABABAFFBABABABBFD0DFFBABABACFFD1BFF%C9BABAC2FFFFFFFD04BAC2C2FD04BAFD05FFC3C2FD06BAB4BABAC1C2C9C9%CFFD0CFFC9C9C2C1FD07BAC1C3FD0DFFBABABAC2BABAB4FD0DFFCABABABB%FD1CFFC1BABAC9FFFFFFFD04BAC9C9FD04BAFD08FFC9C8FD0DBAC1C1C2C1%C2C1C2FD0CBAC2CFFD0FFFFD06BACFFD0DFFC8BABAC2FD1CFFBABABACFFF%FFFFFD04BAC2C2FD04BAFD09FFC2BABAC1C1C1FD17BAC1BABABAFD11FFFD%05BAC2FD0EFFBBBABAC9C9C9C2C9BBC1BBC1BBC1BBC1BBC9C2C9C9CACAFD%08FFCABABABAFD04FFFD04BAC9C9FD04BAFD09FFC2BABAC9FFFFFFCAC9C2%C2C1BBFD0BBAC1C2C9CAFFFFBABABAFD11FFFD05BACFFD0CFFCAC1FD18BA%C2C2C9C9FFFFFFC2BABAC8FD04FFFD04BAC2C2FD04BAFD09FFBABABAFD0D%FFC9CAC9CAFD0AFFBABABBFD11FFFD04BAC1FD09FFCAC9BBFD20BABBC1BB%BABAC9FD04FFFD04BAC2C9FD04BAFD08FFCABABAC1FD1AFFCABABAC2FD10%FFC1FD04BAFD08FFCAC1FD09BABBC2C2C9C9CFCACFCACFCACFCACFCAC9C2%C9C1C1FD0BBAC2C9FFFFFFFD04BAC2C2FD04BAFD08FFC9BABAC2FD1AFFCA%BABABBFD0FFFCFFD04BAC2FD06FFC2FD0BBACAFD15FFCACAC2C1FD09BAC2%C9FD04BAC9C9FD04BAFD08FFBBBABACAFD1AFFCABABAC2FD0FFFC9FD04BA%CAFD04FFC9FD06BAC1C9CAFFBABABAFD1BFFCAC2FD0CBAC2C2FD04BAFD07%FFCABABABACAFD1AFFC9BABAC2FD0FFFFD05BAFFFFFFC9BBFD05BAC2CAFF%FFFFC3BABAC2FD1CFFBABABAC9C2C1FD06BAB4C9C9FD04BAFD07FFCABABA%BBFD1BFFC2BABAC9FD0EFFC2FD04BAC9FFFFC2FD04BAC1C9FD06FFC9BABA%C2FD1BFFCABABABBFD04FFC3C1FD04BAC2C2FD04BAFD07FFC2BABAC9FD1B%FFC1BABAC9FD0DFFC9FD05BACAFFBBFD04BAC9FD08FFBBBABACAFD1BFFC9%BABAC1FD06FFFD04BAC9C9FD04BAFD07FFC1BABAC9FD1BFFBBBABACFFD0C%FFCAC1FD05BACFBBBABABAC1FD0AFFBABABAFD1CFFC2BABAC9FD06FFFD04%BAC2C2FD04BAFD06FFCFBABABAFD1CFFBABABAFD0CFFCABBFD05BAC1FD04%BAC2FD0BFFBABABAFD1CFFBABABACAFD06FFFD04BAC2C9FD04BAFD06FFC9%BABAC2FD1CFFBABABBFD0BFFCABBBABABABBFD05BAC1CAFD0BFFCABABAC2%FD1CFFBABABAFD07FFFD04BAC2C2FD04BAFD06FFC2BABAC2FD1BFFC9BABA%C2FD0AFFC2FD04BACFFD06BACAFD0CFFC9BABAC2FD1BFFC2BABAC2FD07FF%FD04BAC9C9FD04BAFD06FFBABABACFFD1BFFC9BABAC2FD09FFC1FD04BACF%C2FD05BAC9FD0DFFC2BABAC9FD1BFFC1BABAC9FD07FFFD04BAC2C2FD04BA%CFFD04FFCABABABBFD1CFFBBBABAC9FD06FFCAC2FD05BAFFFFC1FD04BAC2%FD0EFFC1BABAC9FD1BFFBABABAFD08FFFD04BAC9C9FD05BAC1C9FFFFC9BA%BAC2FD1CFFC1BABACAFD05FFC2BBFD04BAC2FFFFFFFD05BAFD0FFFBBBABA%FD1BFFCABABAC1FD08FFFD04BAC2C2FD08BABBBABABAC9FD1BFFCFBABABA%FFFFFFC9C2FD05BAC1C9FFFFFFC9FD04BAC9FD0FFFBABABAFD1BFFC2BABA%C2FD08FFFD04BAC9C9FD0CBABBC8C9FD19FFC9BABAC2C9C2FD07BAC9FD05%FFC1BABABAC1FD10FFBABABAFD1BFFBBBABACAFD08FFFD04BAC2C2FD04BA%FFC9C2FD04BAB4FD05BABBC2C2CACAFD10FFCAC9C1BABAB4FD06BAC1C3FD%06FFCAFD04BAC2FD0FFFCABABAC1FD1AFFCABABABAFD09FFFD04BAC2C9FD%04BAFD04FFC2FD0FBAC1C2C1C2C2C9C2C9C1C2C1C1FD0BBAC1C2FD09FFC1%FD04BAFD10FFCFBABAC1FD1AFFCABABAC1FD09FFFD04BAC2C2FD04BAFD04%FFC1BABAC9CAC2C2FD1DBAC2C2CFFD0AFFC9FD04BAC1FD10FFC9BABAC1FD%04FFCACAC9C9C2C9C2C9C2C9C2C9C2CAC9FD07FFC2BABAC9FD09FFFD04BA%C9C9FD04BAFD04FFBABABAFD06FFCFC9C9C1C2FD10BAC1C1BABAC1FD0EFF%C2FD04BAC1FD10FFCABABABBC9C2C1FD12BABBC2C9CAFFC1BABACAFD09FF%FD04BAC2C2FD04BAFFFFFFC9BABAC1FD0EFFC9CAC9CAC9CAC9CAC9CACAFF%FFFFBBBABACAFD0DFFC9FD05BAC2FD10FFC3FD20BAFD0AFFFD04BAC9C9FD%04BAFFFFFFC8BABAC2FD1CFFBABABAFD0EFFBABABAC8BABAC2FD0EFFC9BB%FD08BAC1C1C9C2C9CACFCACFCACAC2C9C2C2BBFD0ABAC2C9FD07FFFD04BA%C2C2FD04BAFFFFFFBABABACFFD1BFFC9BABABBFD0DFFBBBABABAC9BABAC9%FD0CFFC2FD07BAC1C9C9FD12FFCAC3C2BBFD08BAC2C9FD04FFFD04BAC9C9%FD04BAFFFFCABABABBFD1CFFC1BABAC9FD0CFFC3BABABAC1CFBABABBFD0A%FFCAFD05BAC1BABAC2FD19FFBABABAC1FD07BAC9FFFFFD04BAC2C2FD04BA%FFFFC9BABAC1FD1BFFCABABABACAFD0BFFC9FD04BAFFC9BABAC1FD08FFCA%C2FD05BAC9C3BABAC1FD18FFCABABABBFFFFC2C1FD06BAC1FD04BAC2C9FD%04BAFFFFC1BABAC9FD1BFFC9BABAC1FD0CFFC1BABABACFFFCFBABAC1FD08%FFC1BABABAC1C9FFFFCFBABAC1FD18FFC9BABAC2FD05FFC2BBFD08BAC2C2%FD04BAFFFFBABABACAFD1BFFBBBABAC9FD0BFFC1BABABAC2FFFFCABABAC1%FD06FFCFC1BABABAC2CAFFFFFFC9BABAC1FD18FFBBBABAC9FD07FFC9FD07%BAC9C9FD04BAFFCFBABABAFD1BFFCABABABBFD0BFFC1BABABAC1FD04FFBA%BABAFD05FFCFC1BABABAC9FD05FFCABABAC1FD18FFBABABAFD0AFFC9C2FD%04BAC2C2FD04BAFFC2BABAC2FD1BFFC2BABAC1FD09FFC9BBFD04BACAFD04%FFBBBABACAFD04FFC1BABABACAFD07FFBABABBFD17FFCABABABAFD0CFFBA%BABAB4C9C9FD04BAFFC2BABAC9FD1BFFBABABACFFD08FFC2FD04BAC1CFFD%05FFC1BABACFFFFFFFC9BABABACAFD08FFBABABAFD17FFC2BABAC9FD0CFF%FD04BAC2C2FD04BAFFBABABAFD1BFFC2BABAC1FD07FFC9FD06BACAFD06FF%C9BABAC2FFFFFFBABABAC9FD09FFBBBABACFFD16FFC1BABAC9FD0CFFFD04%BAC9C9FD04BACABABAC1FD1BFFC1BABAC9FD05FFC9C1FD06BACAFD07FFC9%BABAC2FFFFC2BABAC1FD0AFFC1BABACFFD16FFBABABAFD0DFFFD04BAC2C2%BABABAB4C1BABAC2FD1AFFC9BABABAFFFFFFCAC2FD04BAB4BABABAC3FD08%FFCFBABABAFFFFBABABAC9FD0AFFC2BABAC3FD15FFC3BABAC1FD0DFFFD04%BAC2C9FD07BAC9C9FD19FFC1BABAC9C9C9BBFD08BABBC9FD0AFFBBBABACF%CABABABBFD0BFFC2BABAC9FD15FFC2BABAC9FD0DFFFD04BAC2C2FD0BBABB%C9C9CACAFD11FFC2FD0ABAC1FD04BACAFD0BFFC1BABAC9C2BABAC9FD0BFF%CABABABBFD15FFBABABACFFD0DFFFD04BAC9C9FD11BAC1C1C1C2C9C2C9C2%C9C2C9BBC2C1FD0ABAC1C2C1BABABAC1CAFD0CFFC9BABAC1C1BABACAFD0B%FFCABABABBFD14FFCABABABBFD0EFFFD04BAC2C2FD06BAC2C2C2FD1DBAC1%C2CAC2FD04BAC2CAFD0DFFCABABABAB4BABAFD0DFFBABABACFFD06FFCACA%C9CAC9CAC9CFFD05FFC9BABAC1FD0EFFFD04BAC9C9FD06BACAFD04FFCFC2%C9C1C1FD13BAC1CAFFFFCFC1FD04BAC9FD10FFBBFD04BAC2FD0DFFC2BABA%C9FFCFC9C2C1FD0BBAC2C2C9BBBABAC9FD0EFFFD04BAC2C2FD06BAFD0CFF%CAC9CAC9C9C2C9C2C9C9CAC9FFC9BABABACAFFCAC2FD04BABBCAFD11FFC9%FD04BABBFD0DFFC2BABAC1FD16BAC1CFFD0DFFFD04BAC9C9FD05BAC2FD19%FFC1BABAC2FFC2FD05BAC2FD13FFCAFD04BAC9FD0DFFCFFD09BAC1C1C1BB%C2C1C1BBC1FD09BAC1C3FD0BFFFD04BAC2C2FD05BAC3FD18FFC9BABABAC2%FD05BAC1CAFD15FFBBBABABAC2FD0CFFCAFD06BABBC9C9FD0BFFCAC9FD09%BAC2CAFD08FFFD04BAC2C9FD05BAFD19FFFD08BAC1CFFD17FFCFBABABAC2%FD0BFFC8FD05BAC2FD11FFC2BABAC2C2FD06BAC2FD07FFFD04BAC2C2FD04%BAC1FD16FFCAC9FD07BAC1C9FD1AFFC1BABABAFD0AFFC2BABABABBBABABA%FD11FFBABABAFFFFFFC9C1FD05BAC9CFFD04FFFD04BAC9C9FD05BAC2C2CA%C9FD0DFFCACAC2C2FD07BAC1C2CFFD1CFFC9BABABACFFD08FFC9BABABAC2%FFBBBABACAFD0FFFC9BABAC1FD05FFCABBFD04BAC1CAFFFFFFFD04BAC2C2%BAB4FD09BABBC1BBC1BBC1BBC1BBFD0BBABBC9CAFD1FFFBABABAC2FD07FF%CABABABAC2FFFFC1BABAC2FD0FFFC2BABAC2FD07FFC9C1FD04BAC2FFFFFD%04BAC9C9FD1BBAC1C2CFFD23FFCABABABAFD07FFBBBABAC2FFFFFFCFBABA%BAFD0FFFBBBABACFFD09FFC9FD04BAC1FFFD04BAC2C2FD04BAFFC9C9C2C1%FD0DBAC1C1C9C9FD28FFC1BABABBFD05FFC9BABABACFFD04FFC1BABAC2FD%0DFFCABABABAFD0CFFBBFD08BAC9C9FD04BAFD08FFCACAC9CFCACAC9FD2F%FFC9BABABAC9FD04FFC2BABAC2FD05FFC9BABAC1FD0DFFC9BABAC1FD0DFF%C2FD07BAC2C2FD04BAFD3FFFC1BABABACAFFFFFFBABABACAFD06FFBABABA%C9FD0CFFC1BABAC9FD0EFFC3BABABAB4BABAC2C9FD04BAFD40FFBABABAC2%FFFFFFBABABAFD07FFC9BABABAFD0CFFC1BABACAFD0FFFC9FD05BAC2C2FD%04BAFD40FFCABABABAC9FFFFBABABBFD08FFBBBABAC2FD0AFFCFBABABAFD%11FFFD05BAC9C9FD04BAFD41FFC9BABABACFFFBABABAFD08FFC9BABABACA%FD09FFC3BABAC2FD0FFFCFBBFD05BAC2C2FD04BAFD42FFC1BABABAFFBABA%BAFD09FFBBBABAC1FD09FFC2BABAC3FD0EFFCAFD07BAC9C9FD04BAFD42FF%CFBBBABABBC2BABAC9FD09FFBABABAC9CACAC2C9C2C9C9CFBABABAFD0EFF%C9BABABAC1FD04BAC2C2FD04BAFD43FFCAFD06BAC2FD09FFC9FD0DBAC1CA%FD0BFFCAC1FD04BACAFD04BAC9C9FD04BAFD44FFC9FD06BAFD09FFC2FD0F%BAC1CAFD08FFC3C1BABABAC2FFFFFD04BAC2C2FD04BAFD45FFC3FD05BAC2%FD07FFC2FD04BABBC1C2C2C9C2C2FD07BAC1CAFD04FFCABBFD04BAC2FFFF%FFFD04BAC2C9FD04BAFD46FFC9FD04BAC1CFFD05FFCABABABAC1CFFD09FF%CAC1FD04BAC1C9FFCAC8FD04BABBCFFD04FFFD04BAC2C2FD04BAFD47FFC3%FD04BAC1FD05FFC2BABAC2FD0DFFCAC2FD0ABAC2FD06FFFD04BAC9C9FD04%BAFD48FFC9C1BABABAC2FD04FFBABABAFD10FFCFBBFD06BAC2CFFD07FFFD%04BAC2C2FD04BAFD49FFCAFD04BAC1CAFFFFBABABAFD12FFBBFD04BACAFD%09FFFD04BAC9C9FD04BACAFD4AFFC1BABABABBC3FFBBBABACFFD12FFBBBA%BAC2FD0AFFFD04BAC2C9FD04BAC9FD4BFFC2FD04BABBC2BABABAFD12FFCF%BABABACFFD08FFC2FD04BACAFFFD05BAFD4CFFCAFD08BAC2FD12FFC2BABA%CAFD08FFC1FD04BACFFFC2FD04BAC2FD4DFFC2BABABAB4BABABAC1FD11FF%C2BABACAFD07FFC9FD04BAC1FFFFCAFD05BAC9FD4DFFCFC2FD06BABBCFFD%0FFFC1BABACAFD06FFCAFD05BACFFFFFFFC1FD05BAC2FD4EFFCABBFD06BA%C1C9FD0BFFCAC2BABABAFD06FFC9FD05BAC2FD05FFFD07BAC9CFFD4DFFC9%C2FD07BAC9C9FD06FFCFC2BBBABABAC9FD04FFC3C1FD05BABBCFFD05FFCF%FD63BAC1FD14BACAFD07FFCFFD75BAC1CAFD0AFFBBFD72BAC2CAFD0CFFC9%C2FD6EBAC1CFFD11FFC9C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2%C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2%C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2%C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2C9C2C2C2CACAFD08%FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb0 0 0 1 ([\203\214\203W\203X\203g\203\214\201[\203V\203\207\203\223]) 0 Xs([\203\214\203W\203X\203g\203\214\201[\203V\203\207\203\223]) Pc0 0 0 0 1 1 1 Xa(\220V\213K\203J\203\211\201[\203X\203E\203H\203b\203` 51) Pc0 0 0 1 0 0 0 Xa(\220V\213K\203J\203\211\201[\203X\203E\203H\203b\203` 52) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe \203p\203^\201[\203\223\203u\203\211\203V\203v\203\211\203O\203C\203\223) (\203A\201[\203g\203u\203\211\203V\203c\201[\203\213)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe \203A\201[\203g\203u\203\211\203V\203v\203\211\203O\203C\203\223) (\203A\201[\203g\203u\203\211\203V\203c\201[\203\213)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (\220V\213K\203J\203\212\203O\203\211\203t\203B\203u\203\211\203V\202\314\216\346\202\350\217\301\202\265) (\203J\203\212\203O\203\211\203t\203B\203u\203\211\203V\203c\201[\203\213)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe \216U\225z\203u\203\211\203V\203v\203\211\203O\203C\203\223) (\216U\225z\203u\203\211\203V\203c\201[\203\213)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe \203u\203\214\203\223\203h\203v\203\211\203O\203C\203\223) (\203u\203\214\203\223\203h)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 0 1 0 0 1 8 0 0 0 0 50 Lb(\203K\203C\203h) Ln0 A1 Ap800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR312 432 m288 432 L288 456 L312 456 L312 432 LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 50 Lb(\203\214\203C\203\204\201[ 2) Ln0 Au0 O0 0 0 0 1 1 1 Xa0 R0.0196 0.5961 0.9137 0 1 0.4 0 XA800 Ar0 J 0 j 0.8 w 4 M []0 d%AI3_Note:0 D0 XR311.5 434.5 m311.5 433.3999 310.5996 432.5 309.5 432.5 c290.5 432.5 l289.3999 432.5 288.5 433.3999 288.5 434.5 c288.5 453.5 l288.5 454.6001 289.3999 455.5 290.5 455.5 c309.5 455.5 l310.5996 455.5 311.5 454.6001 311.5 453.5 c311.5 434.5 lbu1 J 1 j 0.5 w298.9458 441.52 m297.6904 439.0913 293.5322 438.0723 289.1445 439.2476 c288.9629 439.2964 288.7832 439.3481 288.606 439.4028 cS/BBAccumRotation (-0.261799) XT300.1533 445.3999 m299.4033 442.5991 294.8853 441.3765 290.061 442.6685 c289.5 442.8184 288.96 442.9961 288.4448 443.1968 cS/BBAccumRotation (-0.261799) XT299.292 450.2222 m299.417 449.6802 299.2988 449.064 299.1963 448.6802 c298.5708 446.3452 294.9194 445.2925 291.0425 446.3315 c290.0884 446.5874 289.209 446.9458 288.4355 447.376 cS/BBAccumRotation (-0.261799) XT296.6665 453.5552 m297.2505 452.8604 297.5537 451.959 297.3608 451.2388 c296.938 449.6606 294.5054 448.9409 291.9272 449.6313 c290.4063 450.0391 289.1743 450.8462 288.5068 451.7637 cS/BBAccumRotation (-0.261799) XT0 Ap288.5537 451.624 m289.9775 452.9839 291.5815 453.8218 293.1021 454.0181 C296.9995 451.5815 297.9385 444.3838 294.0054 437.6782 cS/BBAccumRotation (-0.000000) XT1 Ap288.728 437.4106 m293.6226 436.1001 298.6538 439.0044 299.9658 443.8989 c301.2764 448.7935 298.3716 453.8257 293.4771 455.1372 c288.728 437.4106 ls/BBAccumRotation (-0.261799) XT0 O0 0 0 0 1 1 1 Xa295.3159 453.3071 m295.1313 452.6187 294.0083 452.3208 292.8091 452.6431 c291.6079 452.9644 290.7856 453.7827 290.9692 454.4722 c291.1538 455.1606 292.2759 455.4585 293.4771 455.1372 c294.6763 454.8149 295.5005 453.9956 295.3159 453.3071 cb/BBAccumRotation (-0.261799) XTUu300.9863 446.3789 m302.2412 448.8076 306.3994 449.8267 310.7871 448.6514 c310.9688 448.6025 311.1484 448.5508 311.3262 448.4961 cS/BBAccumRotation (-3.403392) XT299.7783 442.499 m300.5283 445.2998 305.0469 446.5225 309.8711 445.2305 c310.4316 445.0806 310.9717 444.9028 311.4863 444.7021 cS/BBAccumRotation (-3.403392) XT300.6396 437.6768 m300.5146 438.2188 300.6328 438.835 300.7354 439.2188 c301.3613 441.5537 305.0117 442.6064 308.8887 441.5674 c309.8438 441.3115 310.7227 440.9531 311.4961 440.5229 cS/BBAccumRotation (-3.403392) XT303.2656 434.3438 m302.6816 435.0386 302.3779 435.9399 302.5703 436.6602 c302.9941 438.2383 305.4258 438.958 308.0039 438.2676 c309.5254 437.8599 310.7578 437.0527 311.4248 436.1353 cS/BBAccumRotation (-3.403392) XT0 Ap311.3779 436.2749 m309.9541 434.915 308.3496 434.0771 306.8301 433.8809 C302.9307 436.3188 301.9922 443.522 305.9307 450.231 cS/BBAccumRotation (-3.141593) XT1 Ap311.2031 450.4883 m306.3086 451.7988 301.2773 448.8945 299.9658 444 c298.6553 439.1055 301.5605 434.0732 306.4551 432.7617 c311.2031 450.4883 ls/BBAccumRotation (-3.403392) XT0 O0 0 0 0 1 1 1 Xa304.6152 434.5918 m304.8008 435.2803 305.9238 435.5781 307.123 435.2559 c308.3242 434.9346 309.1465 434.1162 308.9629 433.4268 c308.7773 432.7383 307.6563 432.4404 306.4551 432.7617 c305.2559 433.084 304.4316 433.9033 304.6152 434.5918 cb/BBAccumRotation (-3.403392) XTUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF